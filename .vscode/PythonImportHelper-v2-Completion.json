[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "cross_val_score",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "GridSearchCV",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "cross_val_score",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "cross_val_score",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "SimpleImputer",
        "importPath": "sklearn.impute",
        "description": "sklearn.impute",
        "isExtraImport": true,
        "detail": "sklearn.impute",
        "documentation": {}
    },
    {
        "label": "ColumnTransformer",
        "importPath": "sklearn.compose",
        "description": "sklearn.compose",
        "isExtraImport": true,
        "detail": "sklearn.compose",
        "documentation": {}
    },
    {
        "label": "ColumnTransformer",
        "importPath": "sklearn.compose",
        "description": "sklearn.compose",
        "isExtraImport": true,
        "detail": "sklearn.compose",
        "documentation": {}
    },
    {
        "label": "ColumnTransformer",
        "importPath": "sklearn.compose",
        "description": "sklearn.compose",
        "isExtraImport": true,
        "detail": "sklearn.compose",
        "documentation": {}
    },
    {
        "label": "OneHotEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "LabelEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "OneHotEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "LabelEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "OneHotEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "SVC",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "SVC",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "SVR",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "SVC",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "SVC",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "XGBClassifier",
        "importPath": "xgboost",
        "description": "xgboost",
        "isExtraImport": true,
        "detail": "xgboost",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LogisticRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LogisticRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LogisticRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LogisticRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "DecisionTreeRegressor",
        "importPath": "sklearn.tree",
        "description": "sklearn.tree",
        "isExtraImport": true,
        "detail": "sklearn.tree",
        "documentation": {}
    },
    {
        "label": "DecisionTreeClassifier",
        "importPath": "sklearn.tree",
        "description": "sklearn.tree",
        "isExtraImport": true,
        "detail": "sklearn.tree",
        "documentation": {}
    },
    {
        "label": "RandomForestRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "RandomForestClassifier",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "KNeighborsClassifier",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "GaussianNB",
        "importPath": "sklearn.naive_bayes",
        "description": "sklearn.naive_bayes",
        "isExtraImport": true,
        "detail": "sklearn.naive_bayes",
        "documentation": {}
    },
    {
        "label": "GaussianNB",
        "importPath": "sklearn.naive_bayes",
        "description": "sklearn.naive_bayes",
        "isExtraImport": true,
        "detail": "sklearn.naive_bayes",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "AgglomerativeClustering",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "scipy.cluster.hierarchy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scipy.cluster.hierarchy",
        "description": "scipy.cluster.hierarchy",
        "detail": "scipy.cluster.hierarchy",
        "documentation": {}
    },
    {
        "label": "apriori",
        "importPath": "apyori",
        "description": "apyori",
        "isExtraImport": true,
        "detail": "apyori",
        "documentation": {}
    },
    {
        "label": "apriori",
        "importPath": "apyori",
        "description": "apyori",
        "isExtraImport": true,
        "detail": "apyori",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "stopwords",
        "importPath": "nltk.corpus",
        "description": "nltk.corpus",
        "isExtraImport": true,
        "detail": "nltk.corpus",
        "documentation": {}
    },
    {
        "label": "PorterStemmer",
        "importPath": "nltk.stem.porter",
        "description": "nltk.stem.porter",
        "isExtraImport": true,
        "detail": "nltk.stem.porter",
        "documentation": {}
    },
    {
        "label": "CountVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "ImageDataGenerator",
        "importPath": "keras.preprocessing.image",
        "description": "keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "image",
        "importPath": "keras.preprocessing",
        "description": "keras.preprocessing",
        "isExtraImport": true,
        "detail": "keras.preprocessing",
        "documentation": {}
    },
    {
        "label": "PCA",
        "importPath": "sklearn.decomposition",
        "description": "sklearn.decomposition",
        "isExtraImport": true,
        "detail": "sklearn.decomposition",
        "documentation": {}
    },
    {
        "label": "KernelPCA",
        "importPath": "sklearn.decomposition",
        "description": "sklearn.decomposition",
        "isExtraImport": true,
        "detail": "sklearn.decomposition",
        "documentation": {}
    },
    {
        "label": "LinearDiscriminantAnalysis",
        "importPath": "sklearn.discriminant_analysis",
        "description": "sklearn.discriminant_analysis",
        "isExtraImport": true,
        "detail": "sklearn.discriminant_analysis",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_template",
        "description": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_template",
        "peekOfCode": "dataset = pd.read_csv('Data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)",
        "detail": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_template",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_template",
        "description": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_template",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)",
        "detail": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_template",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_template",
        "description": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_template",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)",
        "detail": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_template",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "description": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "peekOfCode": "dataset = pd.read_csv('Data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\nprint(X)\nprint(y)\n# Taking care of missing data\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputer.fit(X[:, 1:3])\nX[:, 1:3] = imputer.transform(X[:, 1:3])",
        "detail": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "description": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\nprint(X)\nprint(y)\n# Taking care of missing data\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputer.fit(X[:, 1:3])\nX[:, 1:3] = imputer.transform(X[:, 1:3])\nprint(X)",
        "detail": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "description": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "peekOfCode": "y = dataset.iloc[:, -1].values\nprint(X)\nprint(y)\n# Taking care of missing data\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputer.fit(X[:, 1:3])\nX[:, 1:3] = imputer.transform(X[:, 1:3])\nprint(X)\n# Encoding categorical data",
        "detail": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "documentation": {}
    },
    {
        "label": "imputer",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "description": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "peekOfCode": "imputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputer.fit(X[:, 1:3])\nX[:, 1:3] = imputer.transform(X[:, 1:3])\nprint(X)\n# Encoding categorical data\n# Encoding the Independent Variable\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))",
        "detail": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "documentation": {}
    },
    {
        "label": "ct",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "description": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "peekOfCode": "ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))\nprint(X)\n# Encoding the Dependent Variable\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny = le.fit_transform(y)\nprint(y)\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split",
        "detail": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "description": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "peekOfCode": "X = np.array(ct.fit_transform(X))\nprint(X)\n# Encoding the Dependent Variable\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny = le.fit_transform(y)\nprint(y)\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)",
        "detail": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "documentation": {}
    },
    {
        "label": "le",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "description": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "peekOfCode": "le = LabelEncoder()\ny = le.fit_transform(y)\nprint(y)\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\nprint(X_train)\nprint(X_test)\nprint(y_train)\nprint(y_test)",
        "detail": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "description": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "peekOfCode": "y = le.fit_transform(y)\nprint(y)\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\nprint(X_train)\nprint(X_test)\nprint(y_train)\nprint(y_test)\n# Feature Scaling",
        "detail": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "description": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "peekOfCode": "sc = StandardScaler()\nX_train[:, 3:] = sc.fit_transform(X_train[:, 3:])\nX_test[:, 3:] = sc.transform(X_test[:, 3:])\nprint(X_train)\nprint(X_test)",
        "detail": "Machine_Learning.ML_Colab.Part 1 - Data Preprocessing.Section 2 -------------------- Part 1 - Data Preprocessing --------------------.Python.data_preprocessing_tools",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "peekOfCode": "dataset = pd.read_csv('Social_Network_Ads.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Training the Kernel SVM model on the Training set",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "peekOfCode": "sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Training the Kernel SVM model on the Training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "peekOfCode": "X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Training the Kernel SVM model on the Training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "peekOfCode": "X_test = sc.transform(X_test)\n# Training the Kernel SVM model on the Training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "peekOfCode": "classifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Applying k-Fold Cross Validation\nfrom sklearn.model_selection import cross_val_score",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "peekOfCode": "y_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Applying k-Fold Cross Validation\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))\n# Applying Grid Search to find the best model and the best parameters",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Applying k-Fold Cross Validation\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))\n# Applying Grid Search to find the best model and the best parameters\nfrom sklearn.model_selection import GridSearchCV",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "documentation": {}
    },
    {
        "label": "accuracies",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "peekOfCode": "accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))\n# Applying Grid Search to find the best model and the best parameters\nfrom sklearn.model_selection import GridSearchCV\nparameters = [{'C': [0.25, 0.5, 0.75, 1], 'kernel': ['linear']},\n              {'C': [0.25, 0.5, 0.75, 1], 'kernel': ['rbf'], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}]\ngrid_search = GridSearchCV(estimator = classifier,\n                           param_grid = parameters,\n                           scoring = 'accuracy',",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "documentation": {}
    },
    {
        "label": "parameters",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "peekOfCode": "parameters = [{'C': [0.25, 0.5, 0.75, 1], 'kernel': ['linear']},\n              {'C': [0.25, 0.5, 0.75, 1], 'kernel': ['rbf'], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}]\ngrid_search = GridSearchCV(estimator = classifier,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 10,\n                           n_jobs = -1)\ngrid_search.fit(X_train, y_train)\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "documentation": {}
    },
    {
        "label": "grid_search",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "peekOfCode": "grid_search = GridSearchCV(estimator = classifier,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 10,\n                           n_jobs = -1)\ngrid_search.fit(X_train, y_train)\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\nprint(\"Best Accuracy: {:.2f} %\".format(best_accuracy*100))\nprint(\"Best Parameters:\", best_parameters)",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "documentation": {}
    },
    {
        "label": "best_accuracy",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "peekOfCode": "best_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\nprint(\"Best Accuracy: {:.2f} %\".format(best_accuracy*100))\nprint(\"Best Parameters:\", best_parameters)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "documentation": {}
    },
    {
        "label": "best_parameters",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "peekOfCode": "best_parameters = grid_search.best_params_\nprint(\"Best Accuracy: {:.2f} %\".format(best_accuracy*100))\nprint(\"Best Parameters:\", best_parameters)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.grid_search",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "peekOfCode": "dataset = pd.read_csv('Social_Network_Ads.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Training the Kernel SVM model on the Training set",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "peekOfCode": "sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Training the Kernel SVM model on the Training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "peekOfCode": "X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Training the Kernel SVM model on the Training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "peekOfCode": "X_test = sc.transform(X_test)\n# Training the Kernel SVM model on the Training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "peekOfCode": "classifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Applying k-Fold Cross Validation\nfrom sklearn.model_selection import cross_val_score",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "peekOfCode": "y_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Applying k-Fold Cross Validation\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))\n# Visualising the Training set results",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Applying k-Fold Cross Validation\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "documentation": {}
    },
    {
        "label": "accuracies",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "peekOfCode": "accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 48 - Model Selection.Python.k_fold_cross_validation",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "peekOfCode": "dataset = pd.read_csv('Data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Training XGBoost on the Training set\nfrom xgboost import XGBClassifier\nclassifier = XGBClassifier()\nclassifier.fit(X_train, y_train)",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Training XGBoost on the Training set\nfrom xgboost import XGBClassifier\nclassifier = XGBClassifier()\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Training XGBoost on the Training set\nfrom xgboost import XGBClassifier\nclassifier = XGBClassifier()\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "peekOfCode": "classifier = XGBClassifier()\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Applying k-Fold Cross Validation\nfrom sklearn.model_selection import cross_val_score",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "peekOfCode": "y_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Applying k-Fold Cross Validation\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Applying k-Fold Cross Validation\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "documentation": {}
    },
    {
        "label": "accuracies",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "description": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "peekOfCode": "accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))",
        "detail": "Machine_Learning.ML_Colab.Part 10 - Model Selection and Boosting.Section 49 - XGBoost.Python.xg_boost",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "peekOfCode": "dataset = pd.read_csv('Salary_Data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1/3, random_state = 0)\n# Training the Simple Linear Regression model on the Training set\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1/3, random_state = 0)\n# Training the Simple Linear Regression model on the Training set\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n# Predicting the Test set results",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1/3, random_state = 0)\n# Training the Simple Linear Regression model on the Training set\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n# Predicting the Test set results\ny_pred = regressor.predict(X_test)",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "documentation": {}
    },
    {
        "label": "regressor",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "peekOfCode": "regressor = LinearRegression()\nregressor.fit(X_train, y_train)\n# Predicting the Test set results\ny_pred = regressor.predict(X_test)\n# Visualising the Training set results\nplt.scatter(X_train, y_train, color = 'red')\nplt.plot(X_train, regressor.predict(X_train), color = 'blue')\nplt.title('Salary vs Experience (Training set)')\nplt.xlabel('Years of Experience')\nplt.ylabel('Salary')",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "peekOfCode": "y_pred = regressor.predict(X_test)\n# Visualising the Training set results\nplt.scatter(X_train, y_train, color = 'red')\nplt.plot(X_train, regressor.predict(X_train), color = 'blue')\nplt.title('Salary vs Experience (Training set)')\nplt.xlabel('Years of Experience')\nplt.ylabel('Salary')\nplt.show()\n# Visualising the Test set results\nplt.scatter(X_test, y_test, color = 'red')",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 4 - Simple Linear Regression.Python.simple_linear_regression",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "peekOfCode": "dataset = pd.read_csv('50_Startups.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\nprint(X)\n# Encoding categorical data\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))\nprint(X)",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\nprint(X)\n# Encoding categorical data\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))\nprint(X)\n# Splitting the dataset into the Training set and Test set",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "peekOfCode": "y = dataset.iloc[:, -1].values\nprint(X)\n# Encoding categorical data\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))\nprint(X)\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "documentation": {}
    },
    {
        "label": "ct",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "peekOfCode": "ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))\nprint(X)\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Training the Multiple Linear Regression model on the Training set\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "peekOfCode": "X = np.array(ct.fit_transform(X))\nprint(X)\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Training the Multiple Linear Regression model on the Training set\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n# Predicting the Test set results",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "documentation": {}
    },
    {
        "label": "regressor",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "peekOfCode": "regressor = LinearRegression()\nregressor.fit(X_train, y_train)\n# Predicting the Test set results\ny_pred = regressor.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "peekOfCode": "y_pred = regressor.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 5 - Multiple Linear Regression.Python.multiple_linear_regression",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "peekOfCode": "dataset = pd.read_csv('Position_Salaries.csv')\nX = dataset.iloc[:, 1:-1].values\ny = dataset.iloc[:, -1].values\n# Training the Linear Regression model on the whole dataset\nfrom sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X, y)\n# Training the Polynomial Regression model on the whole dataset\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 4)",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "peekOfCode": "X = dataset.iloc[:, 1:-1].values\ny = dataset.iloc[:, -1].values\n# Training the Linear Regression model on the whole dataset\nfrom sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X, y)\n# Training the Polynomial Regression model on the whole dataset\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 4)\nX_poly = poly_reg.fit_transform(X)",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Training the Linear Regression model on the whole dataset\nfrom sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X, y)\n# Training the Polynomial Regression model on the whole dataset\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 4)\nX_poly = poly_reg.fit_transform(X)\nlin_reg_2 = LinearRegression()",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "documentation": {}
    },
    {
        "label": "lin_reg",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "peekOfCode": "lin_reg = LinearRegression()\nlin_reg.fit(X, y)\n# Training the Polynomial Regression model on the whole dataset\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 4)\nX_poly = poly_reg.fit_transform(X)\nlin_reg_2 = LinearRegression()\nlin_reg_2.fit(X_poly, y)\n# Visualising the Linear Regression results\nplt.scatter(X, y, color = 'red')",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "documentation": {}
    },
    {
        "label": "poly_reg",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "peekOfCode": "poly_reg = PolynomialFeatures(degree = 4)\nX_poly = poly_reg.fit_transform(X)\nlin_reg_2 = LinearRegression()\nlin_reg_2.fit(X_poly, y)\n# Visualising the Linear Regression results\nplt.scatter(X, y, color = 'red')\nplt.plot(X, lin_reg.predict(X), color = 'blue')\nplt.title('Truth or Bluff (Linear Regression)')\nplt.xlabel('Position Level')\nplt.ylabel('Salary')",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "peekOfCode": "X_poly = poly_reg.fit_transform(X)\nlin_reg_2 = LinearRegression()\nlin_reg_2.fit(X_poly, y)\n# Visualising the Linear Regression results\nplt.scatter(X, y, color = 'red')\nplt.plot(X, lin_reg.predict(X), color = 'blue')\nplt.title('Truth or Bluff (Linear Regression)')\nplt.xlabel('Position Level')\nplt.ylabel('Salary')\nplt.show()",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "documentation": {}
    },
    {
        "label": "lin_reg_2",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "peekOfCode": "lin_reg_2 = LinearRegression()\nlin_reg_2.fit(X_poly, y)\n# Visualising the Linear Regression results\nplt.scatter(X, y, color = 'red')\nplt.plot(X, lin_reg.predict(X), color = 'blue')\nplt.title('Truth or Bluff (Linear Regression)')\nplt.xlabel('Position Level')\nplt.ylabel('Salary')\nplt.show()\n# Visualising the Polynomial Regression results",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "documentation": {}
    },
    {
        "label": "X_grid",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "peekOfCode": "X_grid = np.arange(min(X), max(X), 0.1)\nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(X, y, color = 'red')\nplt.plot(X_grid, lin_reg_2.predict(poly_reg.fit_transform(X_grid)), color = 'blue')\nplt.title('Truth or Bluff (Polynomial Regression)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()\n# Predicting a new result with Linear Regression\nlin_reg.predict([[6.5]])",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "documentation": {}
    },
    {
        "label": "X_grid",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "peekOfCode": "X_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(X, y, color = 'red')\nplt.plot(X_grid, lin_reg_2.predict(poly_reg.fit_transform(X_grid)), color = 'blue')\nplt.title('Truth or Bluff (Polynomial Regression)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()\n# Predicting a new result with Linear Regression\nlin_reg.predict([[6.5]])\n# Predicting a new result with Polynomial Regression",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 6 - Polynomial Regression.Python.polynomial_regression",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "peekOfCode": "dataset = pd.read_csv('Position_Salaries.csv')\nX = dataset.iloc[:, 1:-1].values\ny = dataset.iloc[:, -1].values\nprint(X)\nprint(y)\ny = y.reshape(len(y),1)\nprint(y)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "peekOfCode": "X = dataset.iloc[:, 1:-1].values\ny = dataset.iloc[:, -1].values\nprint(X)\nprint(y)\ny = y.reshape(len(y),1)\nprint(y)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nsc_y = StandardScaler()",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "peekOfCode": "y = dataset.iloc[:, -1].values\nprint(X)\nprint(y)\ny = y.reshape(len(y),1)\nprint(y)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nsc_y = StandardScaler()\nX = sc_X.fit_transform(X)",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "peekOfCode": "y = y.reshape(len(y),1)\nprint(y)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nsc_y = StandardScaler()\nX = sc_X.fit_transform(X)\ny = sc_y.fit_transform(y)\nprint(X)\nprint(y)",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "documentation": {}
    },
    {
        "label": "sc_X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "peekOfCode": "sc_X = StandardScaler()\nsc_y = StandardScaler()\nX = sc_X.fit_transform(X)\ny = sc_y.fit_transform(y)\nprint(X)\nprint(y)\n# Training the SVR model on the whole dataset\nfrom sklearn.svm import SVR\nregressor = SVR(kernel = 'rbf')\nregressor.fit(X, y)",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "documentation": {}
    },
    {
        "label": "sc_y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "peekOfCode": "sc_y = StandardScaler()\nX = sc_X.fit_transform(X)\ny = sc_y.fit_transform(y)\nprint(X)\nprint(y)\n# Training the SVR model on the whole dataset\nfrom sklearn.svm import SVR\nregressor = SVR(kernel = 'rbf')\nregressor.fit(X, y)\n# Predicting a new result",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "peekOfCode": "X = sc_X.fit_transform(X)\ny = sc_y.fit_transform(y)\nprint(X)\nprint(y)\n# Training the SVR model on the whole dataset\nfrom sklearn.svm import SVR\nregressor = SVR(kernel = 'rbf')\nregressor.fit(X, y)\n# Predicting a new result\nsc_y.inverse_transform(regressor.predict(sc_X.transform([[6.5]])).reshape(-1,1))",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "peekOfCode": "y = sc_y.fit_transform(y)\nprint(X)\nprint(y)\n# Training the SVR model on the whole dataset\nfrom sklearn.svm import SVR\nregressor = SVR(kernel = 'rbf')\nregressor.fit(X, y)\n# Predicting a new result\nsc_y.inverse_transform(regressor.predict(sc_X.transform([[6.5]])).reshape(-1,1))\n# Visualising the SVR results",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "documentation": {}
    },
    {
        "label": "regressor",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "peekOfCode": "regressor = SVR(kernel = 'rbf')\nregressor.fit(X, y)\n# Predicting a new result\nsc_y.inverse_transform(regressor.predict(sc_X.transform([[6.5]])).reshape(-1,1))\n# Visualising the SVR results\nplt.scatter(sc_X.inverse_transform(X), sc_y.inverse_transform(y), color = 'red')\nplt.plot(sc_X.inverse_transform(X), sc_y.inverse_transform(regressor.predict(X).reshape(-1,1)), color = 'blue')\nplt.title('Truth or Bluff (SVR)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "documentation": {}
    },
    {
        "label": "X_grid",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "peekOfCode": "X_grid = np.arange(min(sc_X.inverse_transform(X)), max(sc_X.inverse_transform(X)), 0.1)\nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(sc_X.inverse_transform(X), sc_y.inverse_transform(y), color = 'red')\nplt.plot(X_grid, sc_y.inverse_transform(regressor.predict(sc_X.transform(X_grid)).reshape(-1,1)), color = 'blue')\nplt.title('Truth or Bluff (SVR)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "documentation": {}
    },
    {
        "label": "X_grid",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "peekOfCode": "X_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(sc_X.inverse_transform(X), sc_y.inverse_transform(y), color = 'red')\nplt.plot(X_grid, sc_y.inverse_transform(regressor.predict(sc_X.transform(X_grid)).reshape(-1,1)), color = 'blue')\nplt.title('Truth or Bluff (SVR)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 7 - Support Vector Regression (SVR).Python.support_vector_regression",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "peekOfCode": "dataset = pd.read_csv('Position_Salaries.csv')\nX = dataset.iloc[:, 1:-1].values\ny = dataset.iloc[:, -1].values\n# Training the Decision Tree Regression model on the whole dataset\nfrom sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(X, y)\n# Predicting a new result\nregressor.predict([[6.5]])\n# Visualising the Decision Tree Regression results (higher resolution)",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "peekOfCode": "X = dataset.iloc[:, 1:-1].values\ny = dataset.iloc[:, -1].values\n# Training the Decision Tree Regression model on the whole dataset\nfrom sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(X, y)\n# Predicting a new result\nregressor.predict([[6.5]])\n# Visualising the Decision Tree Regression results (higher resolution)\nX_grid = np.arange(min(X), max(X), 0.01)",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Training the Decision Tree Regression model on the whole dataset\nfrom sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(X, y)\n# Predicting a new result\nregressor.predict([[6.5]])\n# Visualising the Decision Tree Regression results (higher resolution)\nX_grid = np.arange(min(X), max(X), 0.01)\nX_grid = X_grid.reshape((len(X_grid), 1))",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "documentation": {}
    },
    {
        "label": "regressor",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "peekOfCode": "regressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(X, y)\n# Predicting a new result\nregressor.predict([[6.5]])\n# Visualising the Decision Tree Regression results (higher resolution)\nX_grid = np.arange(min(X), max(X), 0.01)\nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(X, y, color = 'red')\nplt.plot(X_grid, regressor.predict(X_grid), color = 'blue')\nplt.title('Truth or Bluff (Decision Tree Regression)')",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "documentation": {}
    },
    {
        "label": "X_grid",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "peekOfCode": "X_grid = np.arange(min(X), max(X), 0.01)\nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(X, y, color = 'red')\nplt.plot(X_grid, regressor.predict(X_grid), color = 'blue')\nplt.title('Truth or Bluff (Decision Tree Regression)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "documentation": {}
    },
    {
        "label": "X_grid",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "peekOfCode": "X_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(X, y, color = 'red')\nplt.plot(X_grid, regressor.predict(X_grid), color = 'blue')\nplt.title('Truth or Bluff (Decision Tree Regression)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 8 - Decision Tree Regression.Python.decision_tree_regression",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "peekOfCode": "dataset = pd.read_csv('Position_Salaries.csv')\nX = dataset.iloc[:, 1:-1].values\ny = dataset.iloc[:, -1].values\n# Training the Random Forest Regression model on the whole dataset\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nregressor.fit(X, y)\n# Predicting a new result\nregressor.predict([[6.5]])\n# Visualising the Random Forest Regression results (higher resolution)",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "peekOfCode": "X = dataset.iloc[:, 1:-1].values\ny = dataset.iloc[:, -1].values\n# Training the Random Forest Regression model on the whole dataset\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nregressor.fit(X, y)\n# Predicting a new result\nregressor.predict([[6.5]])\n# Visualising the Random Forest Regression results (higher resolution)\nX_grid = np.arange(min(X), max(X), 0.01)",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Training the Random Forest Regression model on the whole dataset\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nregressor.fit(X, y)\n# Predicting a new result\nregressor.predict([[6.5]])\n# Visualising the Random Forest Regression results (higher resolution)\nX_grid = np.arange(min(X), max(X), 0.01)\nX_grid = X_grid.reshape((len(X_grid), 1))",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "documentation": {}
    },
    {
        "label": "regressor",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "peekOfCode": "regressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nregressor.fit(X, y)\n# Predicting a new result\nregressor.predict([[6.5]])\n# Visualising the Random Forest Regression results (higher resolution)\nX_grid = np.arange(min(X), max(X), 0.01)\nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(X, y, color = 'red')\nplt.plot(X_grid, regressor.predict(X_grid), color = 'blue')\nplt.title('Truth or Bluff (Random Forest Regression)')",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "documentation": {}
    },
    {
        "label": "X_grid",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "peekOfCode": "X_grid = np.arange(min(X), max(X), 0.01)\nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(X, y, color = 'red')\nplt.plot(X_grid, regressor.predict(X_grid), color = 'blue')\nplt.title('Truth or Bluff (Random Forest Regression)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "documentation": {}
    },
    {
        "label": "X_grid",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "description": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "peekOfCode": "X_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(X, y, color = 'red')\nplt.plot(X_grid, regressor.predict(X_grid), color = 'blue')\nplt.title('Truth or Bluff (Random Forest Regression)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()",
        "detail": "Machine_Learning.ML_Colab.Part 2 - Regression.Section 9 - Random Forest Regression.Python.random_forest_regression",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "peekOfCode": "dataset = pd.read_csv('Social_Network_Ads.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)\n# Feature Scaling",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "peekOfCode": "sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "peekOfCode": "X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "peekOfCode": "X_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))\n# Predicting the Test set results",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "peekOfCode": "classifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "peekOfCode": "y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 14 - Logistic Regression.Python.logistic_regression",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "peekOfCode": "dataset = pd.read_csv('Social_Network_Ads.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)\n# Feature Scaling",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "peekOfCode": "sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the K-NN model on the Training set\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)\n# Predicting a new result",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "peekOfCode": "X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the K-NN model on the Training set\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "peekOfCode": "X_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the K-NN model on the Training set\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))\n# Predicting the Test set results",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "peekOfCode": "classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "peekOfCode": "y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 1),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 1))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 15 - K-Nearest Neighbors (K-NN).Python.k_nearest_neighbors",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "peekOfCode": "dataset = pd.read_csv('Social_Network_Ads.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)\n# Feature Scaling",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "peekOfCode": "sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the SVM model on the Training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "peekOfCode": "X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the SVM model on the Training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "peekOfCode": "X_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the SVM model on the Training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))\n# Predicting the Test set results",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "peekOfCode": "classifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "peekOfCode": "y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 16 - Support Vector Machine (SVM).Python.support_vector_machine",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "peekOfCode": "dataset = pd.read_csv('Social_Network_Ads.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)\n# Feature Scaling",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "peekOfCode": "sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Kernel SVM model on the Training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "peekOfCode": "X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Kernel SVM model on the Training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "peekOfCode": "X_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Kernel SVM model on the Training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))\n# Predicting the Test set results",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "peekOfCode": "classifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "peekOfCode": "y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 17 - Kernel SVM.Python.kernel_svm",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "peekOfCode": "dataset = pd.read_csv('Social_Network_Ads.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)\n# Feature Scaling",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "peekOfCode": "sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Naive Bayes model on the Training set\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n# Predicting a new result",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "peekOfCode": "X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Naive Bayes model on the Training set\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "peekOfCode": "X_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Naive Bayes model on the Training set\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))\n# Predicting the Test set results",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "peekOfCode": "classifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "peekOfCode": "y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 18 - Naive Bayes.Python.naive_bayes",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "peekOfCode": "dataset = pd.read_csv('Social_Network_Ads.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)\n# Feature Scaling",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "peekOfCode": "sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Decision Tree Classification model on the Training set\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "peekOfCode": "X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Decision Tree Classification model on the Training set\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "peekOfCode": "X_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Decision Tree Classification model on the Training set\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))\n# Predicting the Test set results",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "peekOfCode": "classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "peekOfCode": "y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 19 - Decision Tree Classification.Python.decision_tree_classification",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "peekOfCode": "dataset = pd.read_csv('Social_Network_Ads.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)\n# Feature Scaling",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "peekOfCode": "sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Random Forest Classification model on the Training set\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "peekOfCode": "X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Random Forest Classification model on the Training set\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "peekOfCode": "X_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)\n# Training the Random Forest Classification model on the Training set\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))\n# Predicting the Test set results",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "peekOfCode": "classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n# Predicting a new result\nprint(classifier.predict(sc.transform([[30,87000]])))\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "peekOfCode": "y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "description": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))",
        "detail": "Machine_Learning.ML_Colab.Part 3 - Classification.Section 20 - Random Forest Classification.Python.random_forest_classification",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "description": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "peekOfCode": "dataset = pd.read_csv('Mall_Customers.csv')\nX = dataset.iloc[:, [3, 4]].values\n# Using the elbow method to find the optimal number of clusters\nfrom sklearn.cluster import KMeans\nwcss = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n    kmeans.fit(X)\n    wcss.append(kmeans.inertia_)\nplt.plot(range(1, 11), wcss)",
        "detail": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "description": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "peekOfCode": "X = dataset.iloc[:, [3, 4]].values\n# Using the elbow method to find the optimal number of clusters\nfrom sklearn.cluster import KMeans\nwcss = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n    kmeans.fit(X)\n    wcss.append(kmeans.inertia_)\nplt.plot(range(1, 11), wcss)\nplt.title('The Elbow Method')",
        "detail": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "documentation": {}
    },
    {
        "label": "wcss",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "description": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "peekOfCode": "wcss = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n    kmeans.fit(X)\n    wcss.append(kmeans.inertia_)\nplt.plot(range(1, 11), wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()",
        "detail": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "documentation": {}
    },
    {
        "label": "kmeans",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "description": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "peekOfCode": "kmeans = KMeans(n_clusters = 5, init = 'k-means++', random_state = 42)\ny_kmeans = kmeans.fit_predict(X)\n# Visualising the clusters\nplt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')\nplt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')\nplt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')\nplt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')\nplt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')\nplt.title('Clusters of customers')",
        "detail": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "documentation": {}
    },
    {
        "label": "y_kmeans",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "description": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "peekOfCode": "y_kmeans = kmeans.fit_predict(X)\n# Visualising the clusters\nplt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')\nplt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')\nplt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')\nplt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')\nplt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')\nplt.title('Clusters of customers')\nplt.xlabel('Annual Income (k$)')",
        "detail": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 24 - K-Means Clustering.Python.k_means_clustering",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "description": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "peekOfCode": "dataset = pd.read_csv('Mall_Customers.csv')\nX = dataset.iloc[:, [3, 4]].values\n# Using the dendrogram to find the optimal number of clusters\nimport scipy.cluster.hierarchy as sch\ndendrogram = sch.dendrogram(sch.linkage(X, method = 'ward'))\nplt.title('Dendrogram')\nplt.xlabel('Customers')\nplt.ylabel('Euclidean distances')\nplt.show()\n# Training the Hierarchical Clustering model on the dataset",
        "detail": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "description": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "peekOfCode": "X = dataset.iloc[:, [3, 4]].values\n# Using the dendrogram to find the optimal number of clusters\nimport scipy.cluster.hierarchy as sch\ndendrogram = sch.dendrogram(sch.linkage(X, method = 'ward'))\nplt.title('Dendrogram')\nplt.xlabel('Customers')\nplt.ylabel('Euclidean distances')\nplt.show()\n# Training the Hierarchical Clustering model on the dataset\nfrom sklearn.cluster import AgglomerativeClustering",
        "detail": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "documentation": {}
    },
    {
        "label": "dendrogram",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "description": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "peekOfCode": "dendrogram = sch.dendrogram(sch.linkage(X, method = 'ward'))\nplt.title('Dendrogram')\nplt.xlabel('Customers')\nplt.ylabel('Euclidean distances')\nplt.show()\n# Training the Hierarchical Clustering model on the dataset\nfrom sklearn.cluster import AgglomerativeClustering\nhc = AgglomerativeClustering(n_clusters = 5, affinity = 'euclidean', linkage = 'ward')\ny_hc = hc.fit_predict(X)\n# Visualising the clusters",
        "detail": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "documentation": {}
    },
    {
        "label": "hc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "description": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "peekOfCode": "hc = AgglomerativeClustering(n_clusters = 5, affinity = 'euclidean', linkage = 'ward')\ny_hc = hc.fit_predict(X)\n# Visualising the clusters\nplt.scatter(X[y_hc == 0, 0], X[y_hc == 0, 1], s = 100, c = 'red', label = 'Cluster 1')\nplt.scatter(X[y_hc == 1, 0], X[y_hc == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')\nplt.scatter(X[y_hc == 2, 0], X[y_hc == 2, 1], s = 100, c = 'green', label = 'Cluster 3')\nplt.scatter(X[y_hc == 3, 0], X[y_hc == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')\nplt.scatter(X[y_hc == 4, 0], X[y_hc == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')\nplt.title('Clusters of customers')\nplt.xlabel('Annual Income (k$)')",
        "detail": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "documentation": {}
    },
    {
        "label": "y_hc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "description": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "peekOfCode": "y_hc = hc.fit_predict(X)\n# Visualising the clusters\nplt.scatter(X[y_hc == 0, 0], X[y_hc == 0, 1], s = 100, c = 'red', label = 'Cluster 1')\nplt.scatter(X[y_hc == 1, 0], X[y_hc == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')\nplt.scatter(X[y_hc == 2, 0], X[y_hc == 2, 1], s = 100, c = 'green', label = 'Cluster 3')\nplt.scatter(X[y_hc == 3, 0], X[y_hc == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')\nplt.scatter(X[y_hc == 4, 0], X[y_hc == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')\nplt.title('Clusters of customers')\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1-100)')",
        "detail": "Machine_Learning.ML_Colab.Part 4 - Clustering.Section 25 - Hierarchical Clustering.Python.hierarchical_clustering",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 2,
        "importPath": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "description": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "peekOfCode": "def inspect(results):\n    lhs         = [tuple(result[2][0][0])[0] for result in results]\n    rhs         = [tuple(result[2][0][1])[0] for result in results]\n    supports    = [result[1] for result in results]\n    confidences = [result[2][0][2] for result in results]\n    lifts       = [result[2][0][3] for result in results]\n    return list(zip(lhs, rhs, supports, confidences, lifts))\nresultsinDataFrame = pd.DataFrame(inspect(results), columns = ['Left Hand Side', 'Right Hand Side', 'Support', 'Confidence', 'Lift'])\n## Displaying the results non sorted\nresultsinDataFrame",
        "detail": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "description": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "peekOfCode": "dataset = pd.read_csv('Market_Basket_Optimisation.csv', header = None)\ntransactions = []\nfor i in range(0, 7501):\n  transactions.append([str(dataset.values[i,j]) for j in range(0, 20)])\n# Training the Apriori model on the dataset\nfrom apyori import apriori\nrules = apriori(transactions = transactions, min_support = 0.003, min_confidence = 0.2, min_lift = 3, min_length = 2, max_length = 2)\n# Visualising the results\n## Displaying the first results coming directly from the output of the apriori function\nresults = list(rules)",
        "detail": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "documentation": {}
    },
    {
        "label": "transactions",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "description": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "peekOfCode": "transactions = []\nfor i in range(0, 7501):\n  transactions.append([str(dataset.values[i,j]) for j in range(0, 20)])\n# Training the Apriori model on the dataset\nfrom apyori import apriori\nrules = apriori(transactions = transactions, min_support = 0.003, min_confidence = 0.2, min_lift = 3, min_length = 2, max_length = 2)\n# Visualising the results\n## Displaying the first results coming directly from the output of the apriori function\nresults = list(rules)\nresults",
        "detail": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "documentation": {}
    },
    {
        "label": "rules",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "description": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "peekOfCode": "rules = apriori(transactions = transactions, min_support = 0.003, min_confidence = 0.2, min_lift = 3, min_length = 2, max_length = 2)\n# Visualising the results\n## Displaying the first results coming directly from the output of the apriori function\nresults = list(rules)\nresults\n## Putting the results well organised into a Pandas DataFrame\ndef inspect(results):\n    lhs         = [tuple(result[2][0][0])[0] for result in results]\n    rhs         = [tuple(result[2][0][1])[0] for result in results]\n    supports    = [result[1] for result in results]",
        "detail": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "description": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "peekOfCode": "results = list(rules)\nresults\n## Putting the results well organised into a Pandas DataFrame\ndef inspect(results):\n    lhs         = [tuple(result[2][0][0])[0] for result in results]\n    rhs         = [tuple(result[2][0][1])[0] for result in results]\n    supports    = [result[1] for result in results]\n    confidences = [result[2][0][2] for result in results]\n    lifts       = [result[2][0][3] for result in results]\n    return list(zip(lhs, rhs, supports, confidences, lifts))",
        "detail": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "documentation": {}
    },
    {
        "label": "resultsinDataFrame",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "description": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "peekOfCode": "resultsinDataFrame = pd.DataFrame(inspect(results), columns = ['Left Hand Side', 'Right Hand Side', 'Support', 'Confidence', 'Lift'])\n## Displaying the results non sorted\nresultsinDataFrame\n## Displaying the results sorted by descending lifts\nresultsinDataFrame.nlargest(n = 10, columns = 'Lift')",
        "detail": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "documentation": {}
    },
    {
        "label": "resultsinDataFrame.nlargest(n",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "description": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "peekOfCode": "resultsinDataFrame.nlargest(n = 10, columns = 'Lift')",
        "detail": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 28 - Apriori.Python.apriori",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 2,
        "importPath": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "description": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "peekOfCode": "def inspect(results):\n    lhs         = [tuple(result[2][0][0])[0] for result in results]\n    rhs         = [tuple(result[2][0][1])[0] for result in results]\n    supports    = [result[1] for result in results]\n    return list(zip(lhs, rhs, supports))\nresultsinDataFrame = pd.DataFrame(inspect(results), columns = ['Product 1', 'Product 2', 'Support'])\n## Displaying the results sorted by descending supports\nresultsinDataFrame.nlargest(n = 10, columns = 'Support')",
        "detail": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "description": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "peekOfCode": "dataset = pd.read_csv('Market_Basket_Optimisation.csv', header = None)\ntransactions = []\nfor i in range(0, 7501):\n  transactions.append([str(dataset.values[i,j]) for j in range(0, 20)])\n# Training the Eclat model on the dataset\nfrom apyori import apriori\nrules = apriori(transactions = transactions, min_support = 0.003, min_confidence = 0.2, min_lift = 3, min_length = 2, max_length = 2)\n# Visualising the results\n## Displaying the first results coming directly from the output of the apriori function\nresults = list(rules)",
        "detail": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "documentation": {}
    },
    {
        "label": "transactions",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "description": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "peekOfCode": "transactions = []\nfor i in range(0, 7501):\n  transactions.append([str(dataset.values[i,j]) for j in range(0, 20)])\n# Training the Eclat model on the dataset\nfrom apyori import apriori\nrules = apriori(transactions = transactions, min_support = 0.003, min_confidence = 0.2, min_lift = 3, min_length = 2, max_length = 2)\n# Visualising the results\n## Displaying the first results coming directly from the output of the apriori function\nresults = list(rules)\nresults",
        "detail": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "documentation": {}
    },
    {
        "label": "rules",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "description": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "peekOfCode": "rules = apriori(transactions = transactions, min_support = 0.003, min_confidence = 0.2, min_lift = 3, min_length = 2, max_length = 2)\n# Visualising the results\n## Displaying the first results coming directly from the output of the apriori function\nresults = list(rules)\nresults\n## Putting the results well organised into a Pandas DataFrame\ndef inspect(results):\n    lhs         = [tuple(result[2][0][0])[0] for result in results]\n    rhs         = [tuple(result[2][0][1])[0] for result in results]\n    supports    = [result[1] for result in results]",
        "detail": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "description": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "peekOfCode": "results = list(rules)\nresults\n## Putting the results well organised into a Pandas DataFrame\ndef inspect(results):\n    lhs         = [tuple(result[2][0][0])[0] for result in results]\n    rhs         = [tuple(result[2][0][1])[0] for result in results]\n    supports    = [result[1] for result in results]\n    return list(zip(lhs, rhs, supports))\nresultsinDataFrame = pd.DataFrame(inspect(results), columns = ['Product 1', 'Product 2', 'Support'])\n## Displaying the results sorted by descending supports",
        "detail": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "documentation": {}
    },
    {
        "label": "resultsinDataFrame",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "description": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "peekOfCode": "resultsinDataFrame = pd.DataFrame(inspect(results), columns = ['Product 1', 'Product 2', 'Support'])\n## Displaying the results sorted by descending supports\nresultsinDataFrame.nlargest(n = 10, columns = 'Support')",
        "detail": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "documentation": {}
    },
    {
        "label": "resultsinDataFrame.nlargest(n",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "description": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "peekOfCode": "resultsinDataFrame.nlargest(n = 10, columns = 'Support')",
        "detail": "Machine_Learning.ML_Colab.Part 5 - Association Rule Learning.Section 29 - Eclat.Python.eclat",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "description": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "peekOfCode": "dataset = pd.read_csv('Ads_CTR_Optimisation.csv')\n# Implementing UCB\nimport math\nN = 10000\nd = 10\nads_selected = []\nnumbers_of_selections = [0] * d\nsums_of_rewards = [0] * d\ntotal_reward = 0\nfor n in range(0, N):",
        "detail": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "description": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "peekOfCode": "N = 10000\nd = 10\nads_selected = []\nnumbers_of_selections = [0] * d\nsums_of_rewards = [0] * d\ntotal_reward = 0\nfor n in range(0, N):\n    ad = 0\n    max_upper_bound = 0\n    for i in range(0, d):",
        "detail": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "description": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "peekOfCode": "d = 10\nads_selected = []\nnumbers_of_selections = [0] * d\nsums_of_rewards = [0] * d\ntotal_reward = 0\nfor n in range(0, N):\n    ad = 0\n    max_upper_bound = 0\n    for i in range(0, d):\n        if (numbers_of_selections[i] > 0):",
        "detail": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "documentation": {}
    },
    {
        "label": "ads_selected",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "description": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "peekOfCode": "ads_selected = []\nnumbers_of_selections = [0] * d\nsums_of_rewards = [0] * d\ntotal_reward = 0\nfor n in range(0, N):\n    ad = 0\n    max_upper_bound = 0\n    for i in range(0, d):\n        if (numbers_of_selections[i] > 0):\n            average_reward = sums_of_rewards[i] / numbers_of_selections[i]",
        "detail": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "documentation": {}
    },
    {
        "label": "numbers_of_selections",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "description": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "peekOfCode": "numbers_of_selections = [0] * d\nsums_of_rewards = [0] * d\ntotal_reward = 0\nfor n in range(0, N):\n    ad = 0\n    max_upper_bound = 0\n    for i in range(0, d):\n        if (numbers_of_selections[i] > 0):\n            average_reward = sums_of_rewards[i] / numbers_of_selections[i]\n            delta_i = math.sqrt(3/2 * math.log(n + 1) / numbers_of_selections[i])",
        "detail": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "documentation": {}
    },
    {
        "label": "sums_of_rewards",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "description": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "peekOfCode": "sums_of_rewards = [0] * d\ntotal_reward = 0\nfor n in range(0, N):\n    ad = 0\n    max_upper_bound = 0\n    for i in range(0, d):\n        if (numbers_of_selections[i] > 0):\n            average_reward = sums_of_rewards[i] / numbers_of_selections[i]\n            delta_i = math.sqrt(3/2 * math.log(n + 1) / numbers_of_selections[i])\n            upper_bound = average_reward + delta_i",
        "detail": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "documentation": {}
    },
    {
        "label": "total_reward",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "description": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "peekOfCode": "total_reward = 0\nfor n in range(0, N):\n    ad = 0\n    max_upper_bound = 0\n    for i in range(0, d):\n        if (numbers_of_selections[i] > 0):\n            average_reward = sums_of_rewards[i] / numbers_of_selections[i]\n            delta_i = math.sqrt(3/2 * math.log(n + 1) / numbers_of_selections[i])\n            upper_bound = average_reward + delta_i\n        else:",
        "detail": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 32 - Upper Confidence Bound (UCB).Python.upper_confidence_bound",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "description": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "peekOfCode": "dataset = pd.read_csv('Ads_CTR_Optimisation.csv')\n# Implementing Thompson Sampling\nimport random\nN = 10000\nd = 10\nads_selected = []\nnumbers_of_rewards_1 = [0] * d\nnumbers_of_rewards_0 = [0] * d\ntotal_reward = 0\nfor n in range(0, N):",
        "detail": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "description": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "peekOfCode": "N = 10000\nd = 10\nads_selected = []\nnumbers_of_rewards_1 = [0] * d\nnumbers_of_rewards_0 = [0] * d\ntotal_reward = 0\nfor n in range(0, N):\n    ad = 0\n    max_random = 0\n    for i in range(0, d):",
        "detail": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "description": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "peekOfCode": "d = 10\nads_selected = []\nnumbers_of_rewards_1 = [0] * d\nnumbers_of_rewards_0 = [0] * d\ntotal_reward = 0\nfor n in range(0, N):\n    ad = 0\n    max_random = 0\n    for i in range(0, d):\n        random_beta = random.betavariate(numbers_of_rewards_1[i] + 1, numbers_of_rewards_0[i] + 1)",
        "detail": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "documentation": {}
    },
    {
        "label": "ads_selected",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "description": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "peekOfCode": "ads_selected = []\nnumbers_of_rewards_1 = [0] * d\nnumbers_of_rewards_0 = [0] * d\ntotal_reward = 0\nfor n in range(0, N):\n    ad = 0\n    max_random = 0\n    for i in range(0, d):\n        random_beta = random.betavariate(numbers_of_rewards_1[i] + 1, numbers_of_rewards_0[i] + 1)\n        if random_beta > max_random:",
        "detail": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "documentation": {}
    },
    {
        "label": "numbers_of_rewards_1",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "description": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "peekOfCode": "numbers_of_rewards_1 = [0] * d\nnumbers_of_rewards_0 = [0] * d\ntotal_reward = 0\nfor n in range(0, N):\n    ad = 0\n    max_random = 0\n    for i in range(0, d):\n        random_beta = random.betavariate(numbers_of_rewards_1[i] + 1, numbers_of_rewards_0[i] + 1)\n        if random_beta > max_random:\n            max_random = random_beta",
        "detail": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "documentation": {}
    },
    {
        "label": "numbers_of_rewards_0",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "description": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "peekOfCode": "numbers_of_rewards_0 = [0] * d\ntotal_reward = 0\nfor n in range(0, N):\n    ad = 0\n    max_random = 0\n    for i in range(0, d):\n        random_beta = random.betavariate(numbers_of_rewards_1[i] + 1, numbers_of_rewards_0[i] + 1)\n        if random_beta > max_random:\n            max_random = random_beta\n            ad = i",
        "detail": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "documentation": {}
    },
    {
        "label": "total_reward",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "description": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "peekOfCode": "total_reward = 0\nfor n in range(0, N):\n    ad = 0\n    max_random = 0\n    for i in range(0, d):\n        random_beta = random.betavariate(numbers_of_rewards_1[i] + 1, numbers_of_rewards_0[i] + 1)\n        if random_beta > max_random:\n            max_random = random_beta\n            ad = i\n    ads_selected.append(ad)",
        "detail": "Machine_Learning.ML_Colab.Part 6 - Reinforcement Learning.Section 33 - Thompson Sampling.Python.thompson_sampling",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "description": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "peekOfCode": "dataset = pd.read_csv('Restaurant_Reviews.tsv', delimiter = '\\t', quoting = 3)\n# Cleaning the texts\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus = []\nfor i in range(0, 1000):\n  review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])",
        "detail": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "documentation": {}
    },
    {
        "label": "corpus",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "description": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "peekOfCode": "corpus = []\nfor i in range(0, 1000):\n  review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])\n  review = review.lower()\n  review = review.split()\n  ps = PorterStemmer()\n  all_stopwords = stopwords.words('english')\n  all_stopwords.remove('not')\n  review = [ps.stem(word) for word in review if not word in set(all_stopwords)]\n  review = ' '.join(review)",
        "detail": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "documentation": {}
    },
    {
        "label": "cv",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "description": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "peekOfCode": "cv = CountVectorizer(max_features = 1500)\nX = cv.fit_transform(corpus).toarray()\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n# Training the Naive Bayes model on the Training set\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)",
        "detail": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "description": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "peekOfCode": "X = cv.fit_transform(corpus).toarray()\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n# Training the Naive Bayes model on the Training set\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n# Predicting the Test set results",
        "detail": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "description": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n# Training the Naive Bayes model on the Training set\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)",
        "detail": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "description": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "peekOfCode": "classifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "description": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "peekOfCode": "y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "description": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 7 - Natural Language Processing.Section 36 - Natural Language Processing.Python.natural_language_processing",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "peekOfCode": "dataset = pd.read_csv('Churn_Modelling.csv')\nX = dataset.iloc[:, 3:-1].values\ny = dataset.iloc[:, -1].values\nprint(X)\nprint(y)\n# Encoding categorical data\n# Label Encoding the \"Gender\" column\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX[:, 2] = le.fit_transform(X[:, 2])",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "peekOfCode": "X = dataset.iloc[:, 3:-1].values\ny = dataset.iloc[:, -1].values\nprint(X)\nprint(y)\n# Encoding categorical data\n# Label Encoding the \"Gender\" column\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX[:, 2] = le.fit_transform(X[:, 2])\nprint(X)",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "peekOfCode": "y = dataset.iloc[:, -1].values\nprint(X)\nprint(y)\n# Encoding categorical data\n# Label Encoding the \"Gender\" column\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX[:, 2] = le.fit_transform(X[:, 2])\nprint(X)\n# One Hot Encoding the \"Geography\" column",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "documentation": {}
    },
    {
        "label": "le",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "peekOfCode": "le = LabelEncoder()\nX[:, 2] = le.fit_transform(X[:, 2])\nprint(X)\n# One Hot Encoding the \"Geography\" column\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))\nprint(X)\n# Splitting the dataset into the Training set and Test set",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "documentation": {}
    },
    {
        "label": "ct",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "peekOfCode": "ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))\nprint(X)\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "peekOfCode": "X = np.array(ct.fit_transform(X))\nprint(X)\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "peekOfCode": "sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Part 2 - Building the ANN\n# Initializing the ANN\nann = tf.keras.models.Sequential()\n# Adding the input layer and the first hidden layer\nann.add(tf.keras.layers.Dense(units=6, activation='relu'))\n# Adding the second hidden layer\nann.add(tf.keras.layers.Dense(units=6, activation='relu'))",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "peekOfCode": "X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Part 2 - Building the ANN\n# Initializing the ANN\nann = tf.keras.models.Sequential()\n# Adding the input layer and the first hidden layer\nann.add(tf.keras.layers.Dense(units=6, activation='relu'))\n# Adding the second hidden layer\nann.add(tf.keras.layers.Dense(units=6, activation='relu'))\n# Adding the output layer",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "peekOfCode": "X_test = sc.transform(X_test)\n# Part 2 - Building the ANN\n# Initializing the ANN\nann = tf.keras.models.Sequential()\n# Adding the input layer and the first hidden layer\nann.add(tf.keras.layers.Dense(units=6, activation='relu'))\n# Adding the second hidden layer\nann.add(tf.keras.layers.Dense(units=6, activation='relu'))\n# Adding the output layer\nann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "documentation": {}
    },
    {
        "label": "ann",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "peekOfCode": "ann = tf.keras.models.Sequential()\n# Adding the input layer and the first hidden layer\nann.add(tf.keras.layers.Dense(units=6, activation='relu'))\n# Adding the second hidden layer\nann.add(tf.keras.layers.Dense(units=6, activation='relu'))\n# Adding the output layer\nann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))\n# Part 3 - Training the ANN\n# Compiling the ANN\nann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "documentation": {}
    },
    {
        "label": "ann.compile(optimizer",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "peekOfCode": "ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n# Training the ANN on the Training set\nann.fit(X_train, y_train, batch_size = 32, epochs = 100)\n# Part 4 - Making the predictions and evaluating the model\n# Predicting the result of a single observation\n\"\"\"\nHomework:\nUse our ANN model to predict if the customer with the following informations will leave the bank: \nGeography: France\nCredit Score: 600",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "peekOfCode": "y_pred = ann.predict(X_test)\ny_pred = (y_pred > 0.5)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "peekOfCode": "y_pred = (y_pred > 0.5)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 39 - Artificial Neural Networks (ANN).Python.artificial_neural_network",
        "documentation": {}
    },
    {
        "label": "train_datagen",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "peekOfCode": "train_datagen = ImageDataGenerator(rescale = 1./255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\ntraining_set = train_datagen.flow_from_directory('dataset/training_set',\n                                                 target_size = (64, 64),\n                                                 batch_size = 32,\n                                                 class_mode = 'binary')\n# Preprocessing the Test set\ntest_datagen = ImageDataGenerator(rescale = 1./255)",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "documentation": {}
    },
    {
        "label": "training_set",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "peekOfCode": "training_set = train_datagen.flow_from_directory('dataset/training_set',\n                                                 target_size = (64, 64),\n                                                 batch_size = 32,\n                                                 class_mode = 'binary')\n# Preprocessing the Test set\ntest_datagen = ImageDataGenerator(rescale = 1./255)\ntest_set = test_datagen.flow_from_directory('dataset/test_set',\n                                            target_size = (64, 64),\n                                            batch_size = 32,\n                                            class_mode = 'binary')",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "documentation": {}
    },
    {
        "label": "test_datagen",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "peekOfCode": "test_datagen = ImageDataGenerator(rescale = 1./255)\ntest_set = test_datagen.flow_from_directory('dataset/test_set',\n                                            target_size = (64, 64),\n                                            batch_size = 32,\n                                            class_mode = 'binary')\n# Part 2 - Building the CNN\n# Initialising the CNN\ncnn = tf.keras.models.Sequential()\n# Step 1 - Convolution\ncnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "documentation": {}
    },
    {
        "label": "test_set",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "peekOfCode": "test_set = test_datagen.flow_from_directory('dataset/test_set',\n                                            target_size = (64, 64),\n                                            batch_size = 32,\n                                            class_mode = 'binary')\n# Part 2 - Building the CNN\n# Initialising the CNN\ncnn = tf.keras.models.Sequential()\n# Step 1 - Convolution\ncnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))\n# Step 2 - Pooling",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "documentation": {}
    },
    {
        "label": "cnn",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "peekOfCode": "cnn = tf.keras.models.Sequential()\n# Step 1 - Convolution\ncnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))\n# Step 2 - Pooling\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))\n# Adding a second convolutional layer\ncnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))\n# Step 3 - Flattening\ncnn.add(tf.keras.layers.Flatten())",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "documentation": {}
    },
    {
        "label": "cnn.compile(optimizer",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "peekOfCode": "cnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n# Training the CNN on the Training set and evaluating it on the Test set\ncnn.fit(x = training_set, validation_data = test_set, epochs = 25)\n# Part 4 - Making a single prediction\nimport numpy as np\nfrom keras.preprocessing import image\ntest_image = image.load_img('dataset/single_prediction/cat_or_dog_1.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "documentation": {}
    },
    {
        "label": "cnn.fit(x",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "peekOfCode": "cnn.fit(x = training_set, validation_data = test_set, epochs = 25)\n# Part 4 - Making a single prediction\nimport numpy as np\nfrom keras.preprocessing import image\ntest_image = image.load_img('dataset/single_prediction/cat_or_dog_1.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "documentation": {}
    },
    {
        "label": "test_image",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "peekOfCode": "test_image = image.load_img('dataset/single_prediction/cat_or_dog_1.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n    prediction = 'dog'\nelse:\n    prediction = 'cat'\nprint(prediction)",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "documentation": {}
    },
    {
        "label": "test_image",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "peekOfCode": "test_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n    prediction = 'dog'\nelse:\n    prediction = 'cat'\nprint(prediction)",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "documentation": {}
    },
    {
        "label": "test_image",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "peekOfCode": "test_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n    prediction = 'dog'\nelse:\n    prediction = 'cat'\nprint(prediction)",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "description": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "peekOfCode": "result = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n    prediction = 'dog'\nelse:\n    prediction = 'cat'\nprint(prediction)",
        "detail": "Machine_Learning.ML_Colab.Part 8 - Deep Learning.Section 40 - Convolutional Neural Networks (CNN).Python.convolutional_neural_network",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "peekOfCode": "dataset = pd.read_csv('Wine.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Applying PCA",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "peekOfCode": "sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Applying PCA\nfrom sklearn.decomposition import PCA\npca = PCA(n_components = 2)\nX_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "peekOfCode": "X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Applying PCA\nfrom sklearn.decomposition import PCA\npca = PCA(n_components = 2)\nX_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "peekOfCode": "X_test = sc.transform(X_test)\n# Applying PCA\nfrom sklearn.decomposition import PCA\npca = PCA(n_components = 2)\nX_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "documentation": {}
    },
    {
        "label": "pca",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "peekOfCode": "pca = PCA(n_components = 2)\nX_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "peekOfCode": "X_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "peekOfCode": "X_test = pca.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "peekOfCode": "classifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "peekOfCode": "y_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 43 - Principal Component Analysis (PCA).Python.principal_component_analysis",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "peekOfCode": "dataset = pd.read_csv('Wine.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Applying LDA",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "peekOfCode": "sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Applying LDA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nlda = LDA(n_components = 2)\nX_train = lda.fit_transform(X_train, y_train)\nX_test = lda.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "peekOfCode": "X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Applying LDA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nlda = LDA(n_components = 2)\nX_train = lda.fit_transform(X_train, y_train)\nX_test = lda.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "peekOfCode": "X_test = sc.transform(X_test)\n# Applying LDA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nlda = LDA(n_components = 2)\nX_train = lda.fit_transform(X_train, y_train)\nX_test = lda.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "documentation": {}
    },
    {
        "label": "lda",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "peekOfCode": "lda = LDA(n_components = 2)\nX_train = lda.fit_transform(X_train, y_train)\nX_test = lda.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "peekOfCode": "X_train = lda.fit_transform(X_train, y_train)\nX_test = lda.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "peekOfCode": "X_test = lda.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "peekOfCode": "classifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "peekOfCode": "y_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 44 - Linear Discriminant Analysis (LDA).Python.linear_discriminant_analysis",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "peekOfCode": "dataset = pd.read_csv('Wine.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "peekOfCode": "X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "peekOfCode": "y = dataset.iloc[:, -1].values\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Applying Kernel PCA",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "peekOfCode": "sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Applying Kernel PCA\nfrom sklearn.decomposition import KernelPCA\nkpca = KernelPCA(n_components = 2, kernel = 'rbf')\nX_train = kpca.fit_transform(X_train)\nX_test = kpca.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "peekOfCode": "X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n# Applying Kernel PCA\nfrom sklearn.decomposition import KernelPCA\nkpca = KernelPCA(n_components = 2, kernel = 'rbf')\nX_train = kpca.fit_transform(X_train)\nX_test = kpca.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "peekOfCode": "X_test = sc.transform(X_test)\n# Applying Kernel PCA\nfrom sklearn.decomposition import KernelPCA\nkpca = KernelPCA(n_components = 2, kernel = 'rbf')\nX_train = kpca.fit_transform(X_train)\nX_test = kpca.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "documentation": {}
    },
    {
        "label": "kpca",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "peekOfCode": "kpca = KernelPCA(n_components = 2, kernel = 'rbf')\nX_train = kpca.fit_transform(X_train)\nX_test = kpca.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "peekOfCode": "X_train = kpca.fit_transform(X_train)\nX_test = kpca.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "peekOfCode": "X_test = kpca.transform(X_test)\n# Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "peekOfCode": "classifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "peekOfCode": "y_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "description": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))",
        "detail": "Machine_Learning.ML_Colab.Part 9 - Dimensionality Reduction.Section 45 - Kernel PCA.Python.kernel_pca",
        "documentation": {}
    }
]